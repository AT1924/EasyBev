{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminedeckey/Desktop/EasyBev/easy-bev-app/src/components/Cart.js\";\nimport Dynamsoft from \"../Dynamsoft\";\nimport React from 'react';\nimport BarcodeScanner from './BarcodeScanner';\nimport Button from \"@material-ui/core/Button\";\nimport Footer from \"./Footer\";\n\nclass Cart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.appendMessage = str => {\n      this.setState(state => {\n        state.messages.push(str);\n\n        if (state.messages.length > 500) {\n          ++state.messageKeyBase;\n          state.messages.splice(0, 1);\n        }\n\n        return state;\n      });\n    };\n\n    this.onIptChange = event => {\n      // React can't get event.target in async func by default.\n      // Thus get event.target in sync part.\n      let input = event.target;\n\n      (async () => {\n        try {\n          this.appendMessage(\"======== start read... ========\");\n          let reader = this.reader = this.reader || (await Dynamsoft.BarcodeReader.createInstance());\n          let files = input.files;\n\n          for (let i = 0; i < files.length; ++i) {\n            let file = files[i];\n            this.appendMessage(file.name + ':');\n            let results = await reader.decode(file);\n\n            for (let result of results) {\n              this.appendMessage(result.barcodeText);\n            }\n          }\n\n          input.value = \"\";\n          this.appendMessage(\"======== finish read ========\");\n        } catch (ex) {\n          this.appendMessage(ex.message);\n          console.error(ex);\n        }\n      })();\n    };\n\n    this.showScanner = () => {\n      this.setState({\n        bShowScanner: true\n      });\n    };\n\n    this.hideScanner = () => {\n      this.setState({\n        bShowScanner: false\n      });\n    };\n\n    this.reader = null;\n    this.refDivMessage = React.createRef();\n    this.state = {\n      messageKeyBase: 0,\n      messages: [],\n      bShowScanner: false\n    };\n  } // componentDidUpdate(){\n  //     this.refDivMessage.current.scrollTop = this.refDivMessage.current.scrollHeight;\n  // }\n  // componentWillUnmount(){\n  //     if(this.reader){\n  //         this.reader.destroy();\n  //     }\n  // }\n  // {/*<button id = \"scanButton\" onClick={this.showScanner}>Scan</button>*/}\n\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cart\",\n      style: style.cart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, !this.state.bShowScanner ? React.createElement(Button, {\n      onclick: this.showScanner,\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Default\") : React.createElement(\"div\", {\n      style: style.cameraViewContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"scan\",\n      onClick: this.hideScanner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(BarcodeScanner, {\n      appendMessage: this.appendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"div-message\",\n      style: style.div_message,\n      ref: this.refDivMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.state.messages.map((message, index) => React.createElement(\"p\", {\n      key: this.state.messageKeyBase + index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, message))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst style = {\n  div_message: {\n    maxHeight: \"200px\",\n    overflowY: \"auto\",\n    resize: \"both\"\n  },\n  cart: {\n    width: \"100%\",\n    position: \"absolute\",\n    top: \"25%\"\n  },\n  cameraViewContainer: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\nexport default Cart;","map":{"version":3,"sources":["/Users/benjaminedeckey/Desktop/EasyBev/easy-bev-app/src/components/Cart.js"],"names":["Dynamsoft","React","BarcodeScanner","Button","Footer","Cart","Component","constructor","props","appendMessage","str","setState","state","messages","push","length","messageKeyBase","splice","onIptChange","event","input","target","reader","BarcodeReader","createInstance","files","i","file","name","results","decode","result","barcodeText","value","ex","message","console","error","showScanner","bShowScanner","hideScanner","refDivMessage","createRef","render","style","cart","cameraViewContainer","div_message","map","index","maxHeight","overflowY","resize","width","position","top","height"],"mappings":"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","sourcesContent":["import Dynamsoft from \"../Dynamsoft\";\nimport React from 'react';\nimport BarcodeScanner from './BarcodeScanner';\nimport Button from \"@material-ui/core/Button\";\nimport Footer from \"./Footer\";\nclass Cart extends React.Component {\n    constructor(props){\n        super(props);\n        this.reader = null;\n        this.refDivMessage = React.createRef();\n        this.state = {\n            messageKeyBase: 0,\n            messages: [],\n            bShowScanner: false\n        };\n    }\n    // componentDidUpdate(){\n    //     this.refDivMessage.current.scrollTop = this.refDivMessage.current.scrollHeight;\n    // }\n    // componentWillUnmount(){\n    //     if(this.reader){\n    //         this.reader.destroy();\n    //     }\n    // }\n// {/*<button id = \"scanButton\" onClick={this.showScanner}>Scan</button>*/}\n\nrender() {\n        return (\n            <div id = \"cart\" style={style.cart}>\n                { !this.state.bShowScanner ? (\n                    <Button onclick={this.showScanner} variant=\"contained\">Default</Button>\n\n\n                    ) : (\n                    <div style={style.cameraViewContainer}>\n                        <button id = \"scan\" onClick={this.hideScanner}>Cancel</button>\n\n                        <BarcodeScanner appendMessage={this.appendMessage}></BarcodeScanner>\n                    </div>\n                ) }\n\n                <div className=\"div-message\" style={style.div_message} ref={this.refDivMessage}>\n                    { this.state.messages.map((message, index) =>\n                        <p key={ this.state.messageKeyBase + index }>\n                            { message }\n                        </p>\n                    ) }\n                </div>\n                <Footer></Footer>\n            </div>\n        );\n    }\n    appendMessage = str => {\n        this.setState(state=>{\n            state.messages.push(str);\n            if(state.messages.length > 500){\n                ++state.messageKeyBase;\n                state.messages.splice(0, 1);\n            }\n            return state;\n        });\n    }\n    onIptChange = event=>{\n        // React can't get event.target in async func by default.\n        // Thus get event.target in sync part.\n        let input = event.target;\n\n        (async ()=>{\n            try{\n                this.appendMessage(\"======== start read... ========\");\n                let reader = this.reader = this.reader || await Dynamsoft.BarcodeReader.createInstance();\n                let files = input.files;\n                for(let i = 0; i < files.length; ++i){\n                    let file = files[i];\n                    this.appendMessage(file.name + ':')\n                    let results = await reader.decode(file);\n                    for(let result of results){\n                        this.appendMessage(result.barcodeText);\n                    }\n                }\n                input.value = \"\";\n                this.appendMessage(\"======== finish read ========\");\n            }catch(ex){\n                this.appendMessage(ex.message);\n                console.error(ex);\n            }\n        })();\n    }\n    showScanner = ()=>{\n        this.setState({\n            bShowScanner: true\n        });\n    }\n    hideScanner = ()=>{\n        this.setState({\n            bShowScanner: false\n        });\n    }\n}\n\nconst style = {\n    div_message: {\n        maxHeight: \"200px\",\n        overflowY: \"auto\",\n        resize: \"both\"\n    },\n    cart:{\n        width:\"100%\",\n        position:\"absolute\",\n        top:\"25%\",\n    },\n    cameraViewContainer:{\n        position:\"absolute\",\n        width:\"100%\",\n        height:\"100%\",\n    }\n\n\n}\n\nexport default Cart;\n"]},"metadata":{},"sourceType":"module"}